<html>
  <head>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"></script>
  </head>
  <body>
    <canvas id="myCanvas" width="800" height="600">Fallback content, in case the browser does not support Canvas.</canvas>
    <textarea style="display:block; width:800;height:600"></textarea>
    <script src="js/collection-utils.js" type="text/javascript"></script>
    <script src="js/vector-utils.js" type="text/javascript"></script>
    <script src="js/graph-utils.js" type="text/javascript"></script>
    <script src="js/graph-library.js" type="text/javascript"></script>
    <script src="js/json2.js" type="text/javascript"></script>
    <script type="text/javascript">
$(function() {
  var canvas = $("canvas").get(0);
  if (canvas && canvas.getContext) {
    var context = canvas.getContext('2d');
    if (context) {
  
      var graphData = createRandomGraph();
      $("textarea").val(JSON.stringify(graphData, null, 1));
      var gLGraph = new gLGraphComponent(canvas, context, graphData);
    }
  }
});

function createRandomGraph() {
  var spikiness = Math.max(0, (Math.floor(Math.random() * 15)) - 10);
  var graphData = {};
  graphData.nodes = [];

  var nodeCount = Math.floor(Math.random() * 100) + 1;

  for(var nodeIndex = 0; nodeIndex < nodeCount; nodeIndex ++) {
    var newNode = {};
    newNode.graphId = "id" + nodeIndex;
    graphData.nodes.push(newNode);
  }

  graphData.edges = [];

  for(var nodeIndexA in graphData.nodes) {
    var nodeA = graphData.nodes[nodeIndexA];

    for(var nodeIndexB in graphData.nodes) {
      var nodeB = graphData.nodes[nodeIndexB];

      if(Math.floor(Math.random() * nodeCount) < (nodeIndexB * spikiness)) {
        var edge = {};
        edge.nodeAId = nodeA.graphId;
        edge.nodeBId = nodeB.graphId;
        
        graphData.edges.push(edge);

        if(spikiness > 0) {
          break;
        }
      }
    }
  }

  var graphs = normalizeGraph(graphData);

  graphData = reduce(graphs, function(graphA, graphB) {
    if(graphA.nodes.length >= graphB.nodes.length) {
      return graphA;
    } else {
      return graphB;
    }
  });

  if(graphData.nodes.length < 4) {
    return createRandomGraph();
  } else {
    return graphData;
  }
};

function rgb2Hex(red, green, blue) {
  var decColor = red + 256 * green + 65536 * blue;
  return decColor.toString(16);
}

    </script>
  </body>
</html>
